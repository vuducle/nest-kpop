// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  username     String   @unique
  password     String
  profileImage String?  @map("profile_image")
  phoneNumber  String?  @map("phone_number")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  playlists Playlist[]

  @@map("users")
}

model Song {
  id          String   @id @default(uuid())
  spotifyId   String?  @unique @map("spotify_id")
  title       String
  artist      String
  album       String?
  duration    Int // Duration in seconds
  releaseDate DateTime @map("release_date")
  genre       String?
  imageUrl    String?  @map("image_url")
  audioUrl    String?  @map("audio_url")
  previewUrl  String?  @map("preview_url")
  spotifyUrl  String?  @map("spotify_url")
  popularity  Int?     @default(0)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  playlistSongs PlaylistSong[]

  @@map("songs")
}

model Playlist {
  id          String   @id @default(uuid())
  name        String
  description String?
  isPublic    Boolean  @default(false) @map("is_public")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  userId        String         @map("user_id")
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlistSongs PlaylistSong[]

  @@map("playlists")
}

model PlaylistSong {
  id         String   @id @default(uuid())
  playlistId String   @map("playlist_id")
  songId     String   @map("song_id")
  order      Int      @default(0)
  addedAt    DateTime @default(now()) @map("added_at")

  // Relations
  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  song     Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([playlistId, songId])
  @@map("playlist_songs")
}
