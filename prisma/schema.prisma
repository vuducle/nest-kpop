generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String       @id @default(uuid())
  email               String       @unique
  firstName           String       @map("first_name")
  lastName            String       @map("last_name")
  username            String       @unique
  password            String
  profileImage        String?      @map("profile_image")
  phoneNumber         String?      @map("phone_number")
  isActive            Boolean      @default(true) @map("is_active")
  createdAt           DateTime     @default(now()) @map("created_at")
  updatedAt           DateTime     @updatedAt @map("updated_at")
  usernameChangeCount Int          @default(0) @map("username_change_count")
  playlists           Playlist[]
  friendshipsAsUser   Friendship[] @relation("UserFriendships")
  friendshipsAsFriend Friendship[] @relation("FriendFriendships")
  posts               Post[]
  comments            Comment[]
  likes               Like[]

  @@map("users")
}

model Friendship {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  friendId  String   @map("friend_id")
  createdAt DateTime @default(now()) @map("created_at")

  user   User @relation("UserFriendships", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("FriendFriendships", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@map("friendships")
}

model Song {
  id            String         @id @default(uuid())
  title         String
  artist        String
  album         String?
  duration      Int
  releaseDate   DateTime       @map("release_date")
  genre         String?
  imageUrl      String?        @map("image_url")
  audioUrl      String?        @map("audio_url")
  isActive      Boolean        @default(true) @map("is_active")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  spotifyId     String?        @unique @map("spotify_id")
  previewUrl    String?        @map("preview_url")
  spotifyUrl    String?        @map("spotify_url")
  popularity    Int?           @default(0)
  playlistSongs PlaylistSong[]

  @@map("songs")
}

model Playlist {
  id            String         @id @default(uuid())
  name          String
  description   String?
  isPublic      Boolean        @default(false) @map("is_public")
  isActive      Boolean        @default(true) @map("is_active")
  userId        String         @map("user_id")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  playlistSongs PlaylistSong[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("playlists")
}

model PlaylistSong {
  id         String   @id @default(uuid())
  playlistId String   @map("playlist_id")
  songId     String   @map("song_id")
  order      Int      @default(0)
  addedAt    DateTime @default(now()) @map("added_at")
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  song       Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([playlistId, songId])
  @@map("playlist_songs")
}

model Post {
  id        String   @id @default(uuid())
  content   String
  mediaUrl  String?  @map("media_url")
  mediaType String?  @map("media_type") // 'image', 'video', 'audio'
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  isActive  Boolean  @default(true) @map("is_active")

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  isActive  Boolean  @default(true) @map("is_active")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("likes")
}
